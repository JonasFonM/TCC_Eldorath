generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model campaign {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now()) @db.Timestamp(0)
  masterId  Int
  master    user           @relation(fields: [masterId], references: [id])
  public    Boolean        @default(false)
  players   partyMembers[]

  title       String @db.Text
  description String @db.Text
  era         Int    @default(1)
  year        Int    @default(1)
  month       Int    @default(1)
  monthDay    Int    @default(1)
  weekDay     Int    @default(1)
  timeOfDay   Int    @default(1)

  characters character[]
  message    message[]
}

model character {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(0)
  name      String   @db.Text
  npc       Boolean  @default(false)
  boss      Boolean  @default(false)

  level           Int @default(1)
  experience      Int @default(0)
  tier            Int @default(1)
  pendingLineages Int @default(2)
  pendingPath     Int @default(1)
  pendingSkills   Int @default(2)
  pendingMagic    Int @default(0)
  pendingManeuver Int @default(0)

  agility Int
  body    Int
  mind    Int

  vitality        Int @default(1)
  currentVitality Int @default(1)

  defense      Int @default(0)
  magicDefense Int @default(0)

  vigor        Int @default(1)
  currentVigor Int @default(1)

  power        Int @default(1)
  currentPower Int @default(1)

  trueSize      Int @default(1)
  effectiveSize Int @default(1)

  baseWeight Int @default(10)
  carryCap   Int @default(10)
  liftCap    Int @default(15)

  gold Int @default(500)

  slotAccessory Int @default(4)
  slotArmor     Int @default(1)
  slotWeapon    Int @default(2)

  public   Boolean @default(false)
  authorId Int
  user     user    @relation(fields: [authorId], references: [id])

  skills   character_skill[]   @relation
  lineages character_lineage[] @relation
  paths    character_path[]    @relation
  items    character_item[]    @relation

  campaign   campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId Int?

  @@index([authorId], map: "authorId")
}

model lineage {
  id          Int                 @id @default(autoincrement())
  name        String?             @db.Text
  description String              @db.Text
  characters  character_lineage[] @relation
  skills      lineage_skill[]     @relation
}

model character_lineage {
  id          Int     @id @default(autoincrement())
  characterId Int
  lineageId   Int
  pure        Boolean @default(false)

  character character @relation(fields: [characterId], references: [id])
  lineage   lineage   @relation(fields: [lineageId], references: [id])

  @@unique([characterId, lineageId])
}

model path {
  id           Int    @id @default(autoincrement())
  name         String @db.Text
  description  String @db.Text
  pathTier     Int
  vitality     Int
  power        Int
  addMagics    Int    @default(0)
  addManeuvers Int    @default(0)

  reqMagics      Int   @default(0)
  reqManeuvers   Int   @default(0)
  prerequisiteId Int?  @unique
  prerequisite   path? @relation("PreRequisite", fields: [prerequisiteId], references: [id])
  upgrade        path? @relation("PreRequisite")

  characters character_path[] @relation
  skills     path_skill[]     @relation
}

model character_path {
  id          Int @id @default(autoincrement())
  characterId Int
  pathId      Int

  character character @relation(fields: [characterId], references: [id])
  path      path      @relation(fields: [pathId], references: [id])

  @@unique([characterId, pathId])
}

model path_skill {
  id      Int @id @default(autoincrement())
  pathId  Int
  skillId Int

  path  path  @relation(fields: [pathId], references: [id])
  skill skill @relation(fields: [skillId], references: [id])

  @@unique([pathId, skillId])
}

model skill {
  id                    Int               @id @default(autoincrement())
  name                  String?           @db.Text
  description           String?           @db.Text
  agi                   Int               @default(0)
  bdy                   Int               @default(0)
  mnd                   Int               @default(0)
  lvl                   Int               @default(0)
  trSiz                 Int               @default(0)
  efSiz                 Int               @default(0)
  increaseTrueSize      Int               @default(0)
  increaseEffectiveSize Int               @default(0)
  prerequisiteId        Int?              @unique
  prerequisite          skill?            @relation("PreRequisite", fields: [prerequisiteId], references: [id])
  upgrade               skill?            @relation("PreRequisite")
  type                  skillType         @default(Passiva)
  characters            character_skill[]
  lineages              lineage_skill[]
  paths                 path_skill[]
}

enum skillType {
  Passiva
  Magia
  Manobra
}
model character_skill {
  id          Int @id @default(autoincrement())
  characterId Int
  skillId     Int
  level       Int @default(1)

  character character @relation(fields: [characterId], references: [id])
  skill     skill     @relation(fields: [skillId], references: [id])

  @@unique([characterId, skillId])
}

model lineage_skill {
  id        Int     @id @default(autoincrement())
  lineageId Int
  skillId   Int
  pureSkill Boolean

  lineage lineage @relation(fields: [lineageId], references: [id])
  skill   skill   @relation(fields: [skillId], references: [id])

  @@unique([lineageId, skillId])
}

model item {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  type        itemType    @default(slotWeapon)
  subType     itemSubtype @default(Espada)
  baseWeight  Int         @default(1)
  baseCost    Int         @default(10)

  baseReach          Int?
  baseDamageDie      Int?
  baseDamageDieCount Int?

  baseDefense      Int?
  baseMagicDefense Int?

  characters character_item[] @relation
}

model character_item {
  id          Int     @id @default(autoincrement())
  characterId Int
  itemId      Int
  craftTier   Int     @default(1)
  material    String?
  weight      Int     @default(0)
  cost        Int     @default(0)
  equipped    Int     @default(-1)
  twoHanded   Int     @default(-1)

  reachAmp          Int @default(0)
  defenseAmp        Int @default(0)
  magicDefenseAmp   Int @default(0)
  damageDieAmp      Int @default(0)
  damageDieCountAmp Int @default(0)
  critDmgMod        Int @default(0)

  character character @relation(fields: [characterId], references: [id])
  item      item      @relation(fields: [itemId], references: [id])
}

enum itemType {
  slotAccessory
  slotArmor
  slotWeapon
  consumable
}

enum itemSubtype {
  Arco
  Espada
  Machado
  Martelo
  Haste
  Disparo
  Natural
  //Armaduras
  Leve
  Pesada
  //Acessórios
  Joalheria
  Traje
  //Consumíveis
  Catalisador
  Elixir
  Explosivo
}

model user {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  email            String         @unique
  username         String
  password         String
  characters       character[]    @relation()
  gmCampaigns      campaign[]
  sentRequests     friendship[]   @relation("FriendshipUser1")
  receivedRequests friendship[]   @relation("FriendshipUser2")
  playerParties    partyMembers[]
  message          message[]
}

model friendship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user1   user @relation("FriendshipUser1", fields: [user1Id], references: [id])
  user1Id Int

  user2   user @relation("FriendshipUser2", fields: [user2Id], references: [id])
  user2Id Int

  status FriendshipStatus @default(PENDING)

  @@unique([user1Id, user2Id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model partyMembers {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   user @relation(fields: [userId], references: [id])
  userId Int

  campaign   campaign @relation(fields: [campaignId], references: [id])
  campaignId Int
}

model message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user       user     @relation(fields: [userId], references: [id])
  userId     Int
  campaign   campaign @relation(fields: [campaignId], references: [id])
  campaignId Int

  content String
}
