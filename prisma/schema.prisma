generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model campaign {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(0)
  masterId  Int
  user      user     @relation(fields: [masterId], references: [id], map: "campaign_gmfk_1")
  public    Boolean  @default(false)

  title     String    @db.Text
  era       String    @default("7AE")
  weekDay   weekDay   @default(Preparo)
  month     monthName @default(Aeterna)
  monthDay  Int
  timeOfDay timeOfDay

  scenes     scene[]     @relation()
  characters character[] @relation()
}

model scene {
  id         Int         @id @default(autoincrement())
  campaignId Int
  campaign   campaign    @relation(fields: [campaignId], references: [id], map: "campaign_scfk_1")
  createdAt  DateTime    @default(now()) @db.Timestamp(0)
  title      String      @db.Text
  logs       log[]       @relation()
  characters character[] @relation()
}

model log {
  id      Int   @id @default(autoincrement())
  sceneId Int
  scene   scene @relation(fields: [sceneId], references: [id], map: "scene_scfk_1")

  action       String
  actorName    String
  targetNames  String
  effects      String
  hit          Boolean?
  criticalHit  Boolean?
  damageCaused Int?
}

enum monthName {
  Aeterna // Verao - Mes de Aeter e da Criação
  Luxar // Verao - Mes da Primeira Luz e Justicar
  Vita // Verao - Month of Life
  Lual // Outono - Mes de Silveran
  Agnus // Outono - Mes do Sacrifício
  Malkar // Outono - Mes das Despedidas
  Magika // Inverno - Mes da Magia
  Kronica // Inverno - Mes dos Ciclos
  Exora // Inverno Mes do Êxodo
  Natura // Primavera - Mes da Natureza
  Fortuna // Primavera - Mes da Prosperidade
  Harmonia // Primavera - Mes da Paz
}

enum weekDay {
  Descanso
  Preparo
  Jornada
  Batalha
  Luto
  Partilha
}

enum timeOfDay {
  Dawn
  Day
  Night
  Dusk
}

model character {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(0)
  name      String   @db.Text

  level           Int @default(1)
  experience      Int @default(0)
  tier            Int @default(1)
  pendingLineages Int @default(2)
  pendingPath     Int @default(1)
  pendingSkills   Int @default(2)

  agility Int
  body    Int
  mind    Int

  vitality Int @default(1)
  vigor    Int @default(1)
  power    Int @default(1)

  defense    Int @default(1)
  initiative Int @default(1)

  trueSize     Int @default(1)
  relativeSize Int @default(1)

  baseWeight Int @default(10)
  carryCap   Int @default(10)
  liftCap    Int @default(15)

  impactRes    Int @default(0)
  pierceRes    Int @default(0)
  slashRes     Int @default(0)
  acidRes      Int @default(0)
  coldRes      Int @default(0)
  fireRes      Int @default(0)
  lightningRes Int @default(0)
  arcaneRes    Int @default(0)
  cosmicRes    Int @default(0)
  psychicRes   Int @default(0)
  profaneRes   Int @default(0)
  sacredRes    Int @default(0)
  fullRes      Int @default(0)

  gold Int @default(500)

  slotWeapon    Int @default(2)
  slotHelm      Int @default(1)
  slotPauldron  Int @default(2)
  slotGauntlet  Int @default(2)
  slotCuirass   Int @default(1)
  slotUpperLegs Int @default(1)
  slotGreaves   Int @default(2)
  slotCloak     Int @default(1)
  slotAmulet    Int @default(1)
  slotBelt      Int @default(1)
  slotRings     Int @default(10)
  slotEarings   Int @default(2)

  public   Boolean @default(false)
  authorId Int
  user     user    @relation(fields: [authorId], references: [id], map: "character_ibfk_1")

  skills   character_skill[]   @relation
  lineages character_lineage[] @relation
  paths    character_path[]    @relation
  items    character_item[]    @relation

  campaign   campaign? @relation(fields: [campaignId], references: [id])
  campaignId Int?

  scene   scene? @relation(fields: [sceneId], references: [id])
  sceneId Int?

  @@index([authorId], map: "authorId")
}

model lineage {
  id          Int                 @id @default(autoincrement())
  name        String?             @db.Text
  description String              @db.Text
  characters  character_lineage[] @relation
  skills      lineage_skill[]     @relation
}

model character_lineage {
  id          Int     @id @default(autoincrement())
  characterId Int
  lineageId   Int
  pure        Boolean @default(false)

  character character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cl_ibfk_1")
  lineage   lineage   @relation(fields: [lineageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cl_ibfk_2")

  @@unique([characterId, lineageId])
}

model path {
  id             Int              @id @default(autoincrement())
  name           String           @db.Text
  description    String           @db.Text
  pathTier       Int
  vitality       Int
  power          Int
  addMagics      Int              @default(0)
  addTechniques  Int              @default(0)
  addManeuvers   Int              @default(0)
  addOaths       Int              @default(0)
  addTricks      Int              @default(0)
  reqMagics      Int              @default(0)
  reqTechniques  Int              @default(0)
  reqManeuvers   Int              @default(0)
  reqOaths       Int              @default(0)
  reqTricks      Int              @default(0)
  prerequisiteId Int?             @unique
  prerequisite   path?            @relation("PreRequisite", fields: [prerequisiteId], references: [id])
  upgrade        path?            @relation("PreRequisite")
  characters     character_path[] @relation
  skills         path_skill[]     @relation
}

model character_path {
  id          Int @id @default(autoincrement())
  characterId Int
  pathId      Int

  character character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pc_ibfk_1")
  path      path      @relation(fields: [pathId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pc_ibfk_2")

  @@unique([characterId, pathId])
}

model path_skill {
  id      Int @id @default(autoincrement())
  pathId  Int
  skillId Int

  path  path  @relation(fields: [pathId], references: [id])
  skill skill @relation(fields: [skillId], references: [id])

  @@unique([pathId, skillId])
}

model skill {
  id                   Int               @id @default(autoincrement())
  name                 String?           @db.Text
  description          String?           @db.Text
  agi                  Int               @default(0)
  bdy                  Int               @default(0)
  mnd                  Int               @default(0)
  lvl                  Int               @default(0)
  trSiz                Int               @default(0)
  rlSiz                Int               @default(0)
  increaseTrueSize     Int               @default(0)
  increaseRelativeSize Int               @default(0)
  prerequisiteId       Int?              @unique
  prerequisite         skill?            @relation("PreRequisite", fields: [prerequisiteId], references: [id])
  upgrade              skill?            @relation("PreRequisite")
  type                 skillType         @default(CHARACTERISTIC)
  techniqueSubtype     techniqueSubtype?
  characters           character_skill[] @relation
  lineages             lineage_skill[]   @relation
  paths                path_skill[]      @relation
}

enum skillType {
  CHARACTERISTIC
  MAGIC
  TECHNIQUE
}

enum techniqueSubtype {
  MANEUVER
  OATH
  TRICK
}

model effect {
  id          Int          @id @default(autoincrement())
  targetId    Int
  targetModel effectTarget
  targetField String
  effectValue Float
  operator    operator
}

enum effectTarget {
  character
  weapon
  armor
}

enum operator {
  Sum
  Sub
  Mult
  Div
}

model character_skill {
  id          Int @id @default(autoincrement())
  characterId Int
  skillId     Int
  level       Int @default(1)

  character character @relation(fields: [characterId], references: [id])
  skill     skill     @relation(fields: [skillId], references: [id])

  @@unique([characterId, skillId])
}

model lineage_skill {
  id        Int     @id @default(autoincrement())
  lineageId Int
  skillId   Int
  pureSkill Boolean

  lineage lineage @relation(fields: [lineageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ls_ibfk_1")
  skill   skill   @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ls_ibfk_2")

  @@unique([lineageId, skillId])
}

model item {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  type        itemType    @default(slotWeapon)
  subType     itemSubtype @default(Bow)
  baseWeight  Int         @default(1)
  baseCost    Int         @default(10)

  baseReach Int?

  baseDefense Int?

  //flex values for Damage Dies and Damage Resistances
  impact Int @default(0)
  pierce Int @default(0)
  slash  Int @default(0)

  characters character_item[] @relation
}

model character_item {
  id          Int      @id @default(autoincrement())
  characterId Int
  itemId      Int
  craftTier   Int      @default(1)
  material    material @default(Ferro)
  weight      Int      @default(0)
  cost        Int      @default(0)
  equipped    Boolean  @default(false)

  reach  Int?
  hitMod Int?

  defense Int?

  //flex values for Damage Dies and Damage Resistances
  impact        Int @default(0)
  pierce        Int @default(0)
  slash         Int @default(0)
  acid          Int @default(0)
  cold          Int @default(0)
  fire          Int @default(0)
  lightning     Int @default(0)
  arcane        Int @default(0)
  cosmic        Int @default(0)
  psychic       Int @default(0)
  profane       Int @default(0)
  sacred        Int @default(0)
  full          Int @default(0)
  critDmgMod    Int @default(0)
  critChanceMod Int @default(0)

  character character @relation(fields: [characterId], references: [id])
  item      item      @relation(fields: [itemId], references: [id])
}

enum itemType {
  slotAmulet
  slotBelt
  slotCloak
  slotCuirass
  slotEarings
  slotGauntlet
  slotGreaves
  slotHelm
  slotPauldron
  slotRings
  slotUpperLegs
  slotWeapon
  consumable
}

enum itemSubtype {
  Bow
  Discreet
  Thrown
  Firearm
  Polearm
  Natural
  Harpoon
  Crossbow
  Whip
  Club
  Chain
  Unarmed
  FieldSword
  DuelingSword
  Scythe
  Lance
  Axe
  Hammer
  lArmor
  mArmor
  hArmor
  lShield
  mShield
  hShield
  Catalyst
  Focus
  Potion
  Oil
  Bomb
}

enum damageType {
  Impact
  Pierce
  Slash

  Acid
  Cold
  Fire
  Lightning

  Arcane
  Cosmic
  Psychic

  Profane
  Sacred
}

enum material {
  Couro
  Tecidos
  Madeira
  Bronze
  Ferro
  Aco
  Prata
  Ouro
  Adamante
  Draconico
  Alquimico
}

model user {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  email      String      @unique
  username   String
  password   String
  characters character[] @relation()
  campaigns  campaign[]  @relation()

  //Adicionar uma auto-relation 'friends' ou semelhante
}
