generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model campaign {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now()) @db.Timestamp(0)
  masterId  Int
  master    user           @relation(fields: [masterId], references: [id])
  public    Boolean        @default(false)
  players   partyMembers[]

  title       String @db.Text
  description String @db.Text
  era         Int    @default(1)
  year        Int    @default(1)
  month       Int    @default(1)
  monthDay    Int    @default(1)
  weekDay     Int    @default(1)
  timeOfDay   Int    @default(1)

  scenes     scene[]
  characters character[]
}

/**
 * enum monthName {
 * Aeterna // Verao - Mes de Aeter e da Criação
 * Luxar // Verao - Mes da Primeira Luz e Justicar
 * Vita // Verao - Month of Life
 * Lual // Outono - Mes de Silveran
 * Agnus // Outono - Mes do Sacrifício
 * Malkar // Outono - Mes das Despedidas
 * Magika // Inverno - Mes da Magia
 * Kronica // Inverno - Mes dos Ciclos
 * Exora // Inverno Mes do Êxodo
 * Natura // Primavera - Mes da Natureza
 * Fortuna // Primavera - Mes da Prosperidade
 * Harmonia // Primavera - Mes da Paz
 * }
 * enum weekDay {
 * Descanso
 * Preparo
 * Jornada
 * Batalha
 * Luto
 * Partilha
 * }
 * enum timeOfDay {
 * Dawn
 * Day
 * Night
 * Dusk
 * }
 */

model scene {
  id         Int      @id @default(autoincrement())
  campaignId Int
  campaign   campaign @relation(fields: [campaignId], references: [id])
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  title      String   @db.Text
  roundCount Int
  playerTurn Boolean

  era       Int @default(7)
  month     Int @default(1)
  monthDay  Int
  weekDay   Int @default(1)
  timeOfDay Int @default(1)

  logs       log[]            @relation()
  characters characterScene[]
}

model characterScene {
  id          Int       @id @default(autoincrement())
  characterId Int
  character   character @relation(fields: [characterId], references: [id])

  sceneId Int
  scene   scene @relation(fields: [sceneId], references: [id])
}

model log {
  id        Int      @id @default(autoincrement())
  sceneId   Int
  scene     scene    @relation(fields: [sceneId], references: [id], map: "scene_scfk_1")
  createdAt DateTime @default(now()) @db.Timestamp(0)

  round    Int
  turnType String @default("player")

  actorId Int
  actor   character @relation(fields: [actorId], references: [id])

  targetIds String
  actions   logAction[]
  effects   logEffect[]
  damageLog damageLog[]
}

model logAction {
  id Int @id @default(autoincrement())

  logId Int
  log   log @relation(fields: [logId], references: [id])

  actionId Int
  action   action @relation(fields: [actionId], references: [id])
}

model logEffect {
  id    Int @id @default(autoincrement())
  logId Int
  log   log @relation(fields: [logId], references: [id])

  effectId Int
  effect   effect @relation(fields: [effectId], references: [id])

  targetIds  String
  targetType effectTarget
}

model effect {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  applications effectApplication[]
  characters   characterEffect[]
  logs         logEffect[]
}

enum effectTarget {
  character
  item
}

enum operator {
  Sum
  Sub
  Mult
  Div
}

model effectApplication {
  id       Int    @id @default(autoincrement())
  effectId Int
  effect   effect @relation(fields: [effectId], references: [id])

  targetModel effectTarget
  targetField String
  operator    operator
}

model characterEffect {
  id          Int       @id @default(autoincrement())
  characterId Int
  character   character @relation(fields: [characterId], references: [id])

  effectId Int
  effect   effect @relation(fields: [effectId], references: [id])

  magnitude    Int
  roundApplied Int
  duration     Int? // Optional: duration in rounds
  isPermanent  Boolean @default(false)
}

model damageLog {
  id    Int @id @default(autoincrement())
  logId Int
  log   log @relation(fields: [logId], references: [id])

  actorId Int
  actor   character @relation(fields: [actorId], references: [id], name: "actor")

  targetIds           String
  preMitigationDamage Int

  critical Boolean
}

model action {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  actionType  actionType

  vigorCost Int @default(0)
  powerCost Int @default(0)

  attack       Boolean @default(false)
  requiresTest Boolean @default(false) //Determines if a D6 must be rolled to determine Success of the action
  useItem      Boolean @default(false) //Determines if an Item is used as a part of the action
  reaction     Boolean @default(false)

  baseDice     actionDie[]
  baseRange    Int         @default(1) //Determines range for movements and attacks 
  baseAoERange Int         @default(0) //Determines secondary range for AoE 

  skillId Int?
  skill   skill? @relation(fields: [skillId], references: [id], onDelete: SetNull)

  logs          logAction[]
  actionUpgrade actionUpgrade[]
}

model actionDie {
  id              Int            @id @default(autoincrement())
  actionId        Int
  action          action         @relation(fields: [actionId], references: [id])
  dieType         Int            @default(2)
  count           Int            @default(1)
  actionUpgrade   actionUpgrade? @relation(fields: [actionUpgradeId], references: [id], onDelete: SetNull)
  actionUpgradeId Int?
}

model actionUpgrade {
  id              Int         @id @default(autoincrement())
  actionId        Int
  action          action      @relation(fields: [actionId], references: [id])
  vigorCost       Int?
  powerCost       Int?
  newBaseRange    Int?
  newBaseAoERange Int?
  newDice         actionDie[]
}

enum actionType {
  UnarmedATK
  PhysicalMeleeATK
  PhysicalRangedATK
  MagicMeleeATK
  MagicRangedATK
  Movement
  Interaction
}

model character {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamp(0)
  name      String   @db.Text
  npc       Boolean  @default(false)
  boss      Boolean  @default(false)

  level           Int @default(1)
  experience      Int @default(0)
  tier            Int @default(1)
  pendingLineages Int @default(2)
  pendingPath     Int @default(1)
  pendingSkills   Int @default(2)

  agility Int
  body    Int
  mind    Int

  vitality        Int @default(1)
  currentVitality Int @default(1)
  barrier         Int @default(0)
  vigor           Int @default(1)
  currentVigor    Int @default(1)
  power           Int @default(1)
  currentPower    Int @default(1)

  defense    Int @default(1)
  initiative Int @default(1)

  trueSize     Int @default(1)
  relativeSize Int @default(1)

  baseWeight Int @default(10)
  carryCap   Int @default(10)
  liftCap    Int @default(15)

  impactRes    Int @default(0)
  pierceRes    Int @default(0)
  slashRes     Int @default(0)
  acidRes      Int @default(0)
  coldRes      Int @default(0)
  fireRes      Int @default(0)
  lightningRes Int @default(0)
  arcaneRes    Int @default(0)
  cosmicRes    Int @default(0)
  psychicRes   Int @default(0)
  profaneRes   Int @default(0)
  sacredRes    Int @default(0)
  fullRes      Int @default(0)

  gold Int @default(500)

  slotHelm      Int @default(1)
  slotEarings   Int @default(2)
  slotCloak     Int @default(1)
  slotAmulet    Int @default(1)
  slotPauldron  Int @default(2)
  slotCuirass   Int @default(1)
  slotGauntlet  Int @default(2)
  slotWeapon    Int @default(2)
  slotRings     Int @default(10)
  slotBelt      Int @default(1)
  slotUpperLegs Int @default(1)
  slotGreaves   Int @default(2)

  public   Boolean @default(false)
  authorId Int
  user     user    @relation(fields: [authorId], references: [id])

  skills   character_skill[]   @relation
  lineages character_lineage[] @relation
  paths    character_path[]    @relation
  items    character_item[]    @relation

  campaign   campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  campaignId Int?

  scenes         characterScene[]  @relation()
  logs           log[]             @relation()
  effects        characterEffect[]
  actorDamageLog damageLog[]       @relation(name: "actor")

  @@index([authorId], map: "authorId")
}

model lineage {
  id          Int                 @id @default(autoincrement())
  name        String?             @db.Text
  description String              @db.Text
  characters  character_lineage[] @relation
  skills      lineage_skill[]     @relation
}

model character_lineage {
  id          Int     @id @default(autoincrement())
  characterId Int
  lineageId   Int
  pure        Boolean @default(false)

  character character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cl_ibfk_1")
  lineage   lineage   @relation(fields: [lineageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cl_ibfk_2")

  @@unique([characterId, lineageId])
}

model path {
  id             Int              @id @default(autoincrement())
  name           String           @db.Text
  description    String           @db.Text
  pathTier       Int
  vitality       Int
  power          Int
  addMagics      Int              @default(0)
  addTechniques  Int              @default(0)
  addManeuvers   Int              @default(0)
  addOaths       Int              @default(0)
  addTricks      Int              @default(0)
  reqMagics      Int              @default(0)
  reqTechniques  Int              @default(0)
  reqManeuvers   Int              @default(0)
  reqOaths       Int              @default(0)
  reqTricks      Int              @default(0)
  prerequisiteId Int?             @unique
  prerequisite   path?            @relation("PreRequisite", fields: [prerequisiteId], references: [id])
  upgrade        path?            @relation("PreRequisite")
  characters     character_path[] @relation
  skills         path_skill[]     @relation
}

model character_path {
  id          Int @id @default(autoincrement())
  characterId Int
  pathId      Int

  character character @relation(fields: [characterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pc_ibfk_1")
  path      path      @relation(fields: [pathId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pc_ibfk_2")

  @@unique([characterId, pathId])
}

model path_skill {
  id      Int @id @default(autoincrement())
  pathId  Int
  skillId Int

  path  path  @relation(fields: [pathId], references: [id])
  skill skill @relation(fields: [skillId], references: [id])

  @@unique([pathId, skillId])
}

model skill {
  id                   Int               @id @default(autoincrement())
  name                 String?           @db.Text
  description          String?           @db.Text
  agi                  Int               @default(0)
  bdy                  Int               @default(0)
  mnd                  Int               @default(0)
  lvl                  Int               @default(0)
  trSiz                Int               @default(0)
  rlSiz                Int               @default(0)
  increaseTrueSize     Int               @default(0)
  increaseRelativeSize Int               @default(0)
  prerequisiteId       Int?              @unique
  prerequisite         skill?            @relation("PreRequisite", fields: [prerequisiteId], references: [id])
  upgrade              skill?            @relation("PreRequisite")
  type                 skillType         @default(CHARACTERISTIC)
  techniqueSubtype     techniqueSubtype?
  characters           character_skill[]
  lineages             lineage_skill[]
  paths                path_skill[]
  actions              action[]
}

enum skillType {
  CHARACTERISTIC
  MAGIC
  TECHNIQUE
}

enum techniqueSubtype {
  MANEUVER
  OATH
  TRICK
}

model character_skill {
  id          Int @id @default(autoincrement())
  characterId Int
  skillId     Int
  level       Int @default(1)

  character character @relation(fields: [characterId], references: [id])
  skill     skill     @relation(fields: [skillId], references: [id])

  @@unique([characterId, skillId])
}

model lineage_skill {
  id        Int     @id @default(autoincrement())
  lineageId Int
  skillId   Int
  pureSkill Boolean

  lineage lineage @relation(fields: [lineageId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ls_ibfk_1")
  skill   skill   @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ls_ibfk_2")

  @@unique([lineageId, skillId])
}

model item {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  type        itemType    @default(slotWeapon)
  subType     itemSubtype @default(Bow)
  baseWeight  Int         @default(1)
  baseCost    Int         @default(10)

  baseReach Int?

  baseDefense Int?

  //flex values for Damage Dies and Damage Resistances
  impact Int @default(0)
  pierce Int @default(0)
  slash  Int @default(0)

  characters character_item[] @relation
}

model character_item {
  id          Int      @id @default(autoincrement())
  characterId Int
  itemId      Int
  craftTier   Int      @default(1)
  material    material @default(Ferro)
  weight      Int      @default(0)
  cost        Int      @default(0)
  equipped    Int      @default(-1)

  reach  Int?
  hitMod Int?

  defense Int?

  //flex values for Damage Dies and Damage Resistances
  impact        Int @default(0)
  pierce        Int @default(0)
  slash         Int @default(0)
  acid          Int @default(0)
  cold          Int @default(0)
  fire          Int @default(0)
  lightning     Int @default(0)
  arcane        Int @default(0)
  cosmic        Int @default(0)
  psychic       Int @default(0)
  profane       Int @default(0)
  sacred        Int @default(0)
  full          Int @default(0)
  critDmgMod    Int @default(0)
  critChanceMod Int @default(0)

  character character @relation(fields: [characterId], references: [id])
  item      item      @relation(fields: [itemId], references: [id])
}

enum itemType {
  slotAmulet
  slotBelt
  slotCloak
  slotCuirass
  slotEarings
  slotGauntlet
  slotGreaves
  slotHelm
  slotPauldron
  slotRings
  slotUpperLegs
  slotWeapon
  consumable
}

enum itemSubtype {
  Bow
  Discreet
  Thrown
  Firearm
  Polearm
  Natural
  Harpoon
  Crossbow
  Whip
  Club
  Chain
  Unarmed
  FieldSword
  DuelingSword
  Scythe
  Lance
  Axe
  Hammer
  lArmor
  mArmor
  hArmor
  lShield
  mShield
  hShield
  Catalyst
  Focus
  Potion
  Oil
  Bomb
}

enum damageType {
  Impact
  Pierce
  Slash

  Acid
  Cold
  Fire
  Lightning

  Arcane
  Cosmic
  Psychic

  Profane
  Sacred
}

enum material {
  Couro
  Tecidos
  Madeira
  Bronze
  Ferro
  Aco
  Prata
  Ouro
  Adamante
  Draconico
  Alquimico
}

model user {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  email            String         @unique
  username         String
  password         String
  characters       character[]    @relation()
  gmCampaigns      campaign[]
  sentRequests     friendship[]   @relation("FriendshipUser1")
  receivedRequests friendship[]   @relation("FriendshipUser2")
  playerParties    partyMembers[]
}

model friendship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user1   user @relation("FriendshipUser1", fields: [user1Id], references: [id])
  user1Id Int

  user2   user @relation("FriendshipUser2", fields: [user2Id], references: [id])
  user2Id Int

  status FriendshipStatus @default(PENDING)

  @@unique([user1Id, user2Id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model partyMembers {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  user   user @relation(fields: [userId], references: [id])
  userId Int

  campaign   campaign @relation(fields: [campaignId], references: [id])
  campaignId Int
}
